[{"title":"redux-saga学习笔记","url":"/2018/08/05/redux-saga学习笔记/"},{"title":"redux学习笔记","url":"/2018/08/05/redux学习笔记/","content":"\n# 四个东西\n\n1. store\n\n一个存放应用所有状态的地方\n\n2. state\n应用的状态, 整体是个对象, 像这样  \n\n```javascript\n{\n  todos: [{\n    text: 'Eat food',\n    completed: true\n  }, {\n    text: 'Exercise',\n    completed: false\n  }],\n  visibilityFilter: 'SHOW_COMPLETED'\n}\n```\n\n3. action\n\n一个用于描述发生了某件事的对象, 像这样\n\n```javascript\n{type:'type', id:1...}\n```\n4. reducer\n用于描述一个事件发生后状态应该如何改变, 是一个纯函数. 根据action的type和参数得到新的state并return\n\n```\nreducer(state, action) {\n  return newState;\n}\n```\n\n------------------\n## 关于这几个的理解\n\n<img src=\"/img/2018/08/redux学习笔记1.png\" height=\"550\"/>\n\n\n* 几个方法\n\n1. combineReducers 将多个reducer函数合起来, 便于createStrore使用\n\n2. createStore(reducer, [preloadedState], enhancer) 创建store\n\n3. Store 方法\n\n- getState()\n- dispatch(action)\n- subscribe(listener)\n- replaceReducer(nextReducer)\n\n4. applyMiddleware \n\n# react-redux\n\n1. 容器组件与视图组件\n\n2. connect\n```JavaScript\n\nimport { connect } from 'react-redux'\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n```\n\n- mapStateToProps\n\n```javascript\nconst mapStateToProps = (state) => {\n  return {\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\n  }\n}`\n```\n\n- mapDispatchToProps\n\n```javascript\nconst mapDispatchToProps = (\n  dispatch,\n  ownProps\n) => {\n  return {\n    onClick: () => {\n      dispatch({\n        type: 'SET_VISIBILITY_FILTER',\n        filter: ownProps.filter\n      });\n    }\n  };\n}\n```"},{"title":"记一次苦逼的找bug经历","url":"/2018/07/09/记一次苦逼的找bug经历/","content":"## 背景\n\n公司项目的模式是后端给给模板塞一些静态数据, 加载前端放在cdn上的js,css, js负责动态的构建整个dom, 采用的框架是React. 某日需要添加一个新的页面, 遂写了一个模板html给server, 写好了js,css的路径, 让他response出来. 折腾了一下午, js文件正常加载, css正常加载, 可是整个页面空空如也, html里边只有个id为app的div(ps: 这是一个范式了, 我们会用react做, 往这个app里填东西).\n\n## 漫长的bug寻找过程\n\n1. 是有缓存吗?\n\n我甚至将所有近七天的浏览器数据都清除了, 重启Fiddler, 勾选disable cache. 反正能试的我都试了.\n\n2. 是打包出问题了吗?\n\n用的是webpack打包的, 我尝试去加个alert(3), 然后在打包后的文件去搜索, 发现是能搜索到的?\n\n3. 是不是我里边的小组件有问题?\n\n我尝试在根级组件加了乱七八糟的东西, 结果还是啥都没有?\n\n4. 是不是还有其他的依赖没有下载下来?\n\n我将他的network与其他页面的对比, 试图发现不同, 但并没有对结果又影响的不同.\n\n5. 还是问问老大吧?\n\n我厚着脸皮发微信问老大, 然而,,,他在开会, 还开了很久.\n\n## 终于找到了\n\n就在我几近崩溃之时, 我趴在桌上还html结构发现,,,,原来是这里. 我的HTML在浏览器显示是这样的.\n\n```html\n<scritp src = 'aaa.js'></script>\n</body>\n</script>\n```\n\n在看我给后端的模板, 发现我写成了这样.\n\n```html\n<scritp src = 'aaa.js' />\n```\n\n哎哎哎, 害死人啊. 这样写浏览器会照常下载, 但构建的html结构不对, 引入的文件也不会执行.\n\n## 总结一下\n\n应该正确使用html标签, 该是自闭合的就得自闭合, 该写两个标签闭合的就写两个标签闭合. 不要因为几次写错标签找瞎了眼, 找白了头.\n\n------------","tags":["开发记录"]},{"title":"ES6-代理反射","url":"/2018/07/08/ES6-代理/","content":"\n> 学习了ES6中的代理. 代理赋予了开发者访问js底层的一些东西的能力, 还是挺好玩的, 不过有点多, 对比一下.\n\n1. 一些比较\n\n|比较项|反射方法|Object的方法|备注|\n|---|---|---|---|\n|set|Reflect.set(trapTarget, key, value, redeiver)|-|拦截为对象属性赋值|\n|get|Reflect.get(trapTraget, key, receiver)|-|拦截读取对象属性|\n|has|Reflect.has(trapTarget, key)|-|拦截in操作|\n|delete|Reflect.deleteProperty(trapTarget,key)|-|拦截delete操作|\n|setPrototypeOf|Reflect.setPrototypeOf(trapTarget, proto) 底层操作,返回Boolean表示操作是否成功,成功则true,失败则false|Object.setPrototypeOf(trapTarget,proto) 上层操作, 操作失败直接抛出错误|拦截setPrototypeOf操作|\n|getPrototypeOf|Reflect.getPrototypeOf(trapTarget) 参数不是对象直接报错|Object.getPrototypeOf(trapTarget),参数不是对象先转换成对象|拦截getPrototypeOf操作|\n|preventExtensions|Reflect.preventExtensions(trapTarget),参数不是对象报错,参数是对象返回true或false|Object.preventExtensions(trapTarget),返回参数|拦截preventExtensions|\n|isExtensible|Reflect.isExtensible(target) 非对象直接报错|Object.isExtensible(target) 非对象返回false|拦截isExtensible|\n|defineProperty|Reflect.defineProperty(trapTarget, key, descriptor) 返回true或false|Object.defineProperty(trapTarget, key, descriptor) 出错时报错|拦截defineProperty|\n|getOwnPropertyDescriptor|Refect.getOwnPropertyDescriptor(trapTarget,key) 非对象报错|Object.getOwnPropertyDescriptor(trapTarget,key) 非对象转换成对象|enumerable,configurable,value,writable,get,set|\n|ownKeys|Reflect.ownKeys(target)|Object.keys(),Object.getOwnPropertyNames(),Object.assign(),Object.getOwnPropertySymbols()|返回数组就好|\n|apply|Reflect.apply(trapTarget,thisArg,argumentList)|-|拦截函数调用|\n|construct|Reflect.construct(target,argumentList)|-|拦截new调用|\n\n\n2. 创建可撤销的代理\n\n```javascript\nProxy.revocable();  => {proxy, revoke}\n\n调用revoke()即可撤销\n```\n","tags":["js"]},{"title":"ES6-模块","url":"/2018/07/08/ES6-模块/","content":"\n> 一直在用ES6的模块机制, 现在系统学习下, 记录一下.\n\n## ES6模块的特性\n\n- 自动运行在严格模式下\n- 是一个隔离的作用域, 不会污染全局\n- 模块顶层作用域没有this, this为undefined\n- 导出的才能被方法, 没有导出的相当于是模块私有的\n\n## 模块的定义\n \n  模块的定义和普通js代码并没有太大区别, 只是多了一个导出的操作. \n\n  ```javascript\n  1. first.js\n  export function fn1() {};\n  export const a = 1;\n  export class A {};\n\n  // 可以导出 函数, 变量, 和类\n\n  2. second.js\n  function fn1() {}\n  export fn1;\n\n  // 可以这样直接导出引用\n\n  3. third.js\n  function fn1() {};\n  export fn1 as fn2;\n\n  // 可以用as指定导出的别名\n\n  4. forth.js\n\n  function fn1() {};\n  const a = 1;\n  export default fn1;\n  export a;\n\n  // 可以这样导出一个默认的东西\n\n  ```\n\n## 模块的导入\n  模块的导入使用的是import语句, 分为几种情况:\n  - 普通导入\n  - 全部导入\n  - 导入一部分\n  - 定义导入别名\n  - 导入默认导出的\n  - 同时导入默认导出的和非默认导出的\n\n  *默认的必须在非默认的前面*\n  ```javascript\n  import {fn1, a, A} from './first.js';\n  import * as F from './first.js';\n  import {fn1} from './first.js';\n  import {fn1 as fn2} from './first.js';\n  import fn1 from 'forth.js';\n  import fn1, {a} from 'forth.js';\n\n  ```\n## 模块的加载顺序\n\n1. 有三种方式可以将模块放到html中\n\n```javascript\n1. <script type=\"module\" src = './a.js'></script>\n2. \n<script type=\"module\">\n  import {fn1} from './first.js';\n\n</script>\n3. 通过worker\nlet worker = new Worder('a.js', {type:'module'});\n区别,无法通过self.importScripts()加载其他模块\n\n```\n2. 这些模块会顺序加载, 如果有引入其他的模块则递归加载\n\n3. 会被加上defer属性, 所以会在文档加载完成后顺序执行, 同样,如果有引入其他模块会递归执行\n\n## 模块与脚本的对比\n| 项目 | 模块 | 脚本|\n|:---:|:---:|:----:|\n|作用域|一个模块是一个作用域|全局作用域|\n|严格非严格|默认就是严格模式|需要加use strict 才进入严格模式|\n|引入方式|type为module|type为text/javasctipt|\n\n## 一些值得注意的地方\n- 模块导入的东西不能再改变引用\n- 模块的导入路径开头必须为., ./或/, 或者直接是url,否则不能解析\n\n------------------------\n\n参考:\n\n- <深入理解ES6>\n\n","tags":["js"]},{"title":"hexo操作指南","url":"/2018/07/07/hexo操作指南/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]